const TelegramBot = require("node-telegram-bot-api");
const mongoose = require("mongoose");
const User = require("./user.schema.js");
const token = "7719546177:AAGIijxVuqB0pn6AmsgTxBKiPOmT-leFx9Q";
const bot = new TelegramBot(token, { polling: true });

mongoose
    .connect("mongodb+srv://matuk:matuk@matuk.kbkqbez.mongodb.net/")
    .then(() => console.log("‚úÖ MongoDB connected!"))
    .catch((err) => console.error("‚ùå Connection error:", err));

const waitingForUserName = new Map(); // –ß–µ–∫–∞—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è —é–∑–µ—Ä—ñ–≤

// ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const adminId = 575812908; // –ó–∞–º—ñ–Ω–∏ –Ω–∞ ID –≤–∞—à–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞

// –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç—É
const menuKeyboard = {
    reply_markup: {
        keyboard: [["‚ûï –î–æ–¥–∞—Ç–∏ —é–∑–µ—Ä–∞", "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —é–∑–µ—Ä–∞"], ["üí∏ –ë—É—Ö–∞–ª—Ç–µ—Ä—ñ—è"]],
        resize_keyboard: true,
        one_time_keyboard: true,
    },
};

bot.on("message", async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text;

    // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ —ñ –∑–≤–∏—á–∞–π–Ω–∏—Ö)
    if (userId !== bot.id) {
        bot.deleteMessage(chatId, msg.message_id);
    }

    if (text === "/start") {
        bot.sendMessage(chatId, "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", menuKeyboard);
        return;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if (
        userId !== adminId &&
        (text === "‚ûï –î–æ–¥–∞—Ç–∏ —é–∑–µ—Ä–∞" || text === "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —é–∑–µ—Ä–∞")
    ) {
        return bot.sendMessage(
            chatId,
            "‚ùå –¶—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ –≤–∏–∫–æ–Ω–∞—Ç–∏ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!"
        );
    }

    if (userId !== adminId && (text === "‚ûï" || text === "‚ùå")) {
        return bot.sendMessage(
            chatId,
            "‚ùå –¶—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ –≤–∏–∫–æ–Ω–∞—Ç–∏ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!"
        );
    }

    if (text === "‚ûï –î–æ–¥–∞—Ç–∏ —é–∑–µ—Ä–∞" || text === "/add_user") {
        bot.sendMessage(chatId, "–í–≤–µ–¥–∏ —ñ–º'—è —é–∑–µ—Ä–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è:");
        waitingForUserName.set(userId, "add");
        return;
    }

    if (text === "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —é–∑–µ—Ä–∞" || text === "/remove_user") {
        bot.sendMessage(chatId, "–í–≤–µ–¥–∏ —ñ–º'—è —é–∑–µ—Ä–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:");
        waitingForUserName.set(userId, "remove");
        return;
    }

    if (text === "üí∏ –ë—É—Ö–∞–ª—Ç–µ—Ä—ñ—è" || text === "/money") {
        const users = await User.find({});
        if (users.length === 0) {
            return bot.sendMessage(chatId, "‚ùå –£ –±–∞–∑—ñ –Ω–µ–º–∞ —é–∑–µ—Ä—ñ–≤!");
        }

        const buttons = users.map((user) => [
            { text: user.name, callback_data: `money_${user._id}` },
        ]);

        bot.sendMessage(chatId, "–û–±–µ—Ä—ñ—Ç—å —é–∑–µ—Ä–∞:", {
            reply_markup: { inline_keyboard: buttons },
        });
        return;
    }

    if (waitingForUserName.get(userId) === "add") {
        const username = text.trim();
        waitingForUserName.delete(userId);
        let user = await User.findOne({ name: username });
        if (!user) {
            user = new User({ name: username, counter: 0 });
            await user.save();
            bot.sendMessage(chatId, `‚úÖ –ú–∞—Ç—é–∫–∞–ª—å–Ω–∏–∫ **${username}** –¥–æ–¥–∞–Ω–∏–π!`);
        } else {
            bot.sendMessage(
                chatId,
                `‚ö†Ô∏è –ú–∞—Ç—é–∫–∞–ª—å–Ω–∏–∫ **${username}** –≤–∂–µ —î –≤ –±–∞–∑—ñ!`
            );
        }
        return;
    }

    if (waitingForUserName.get(userId) === "remove") {
        const username = text.trim();
        waitingForUserName.delete(userId);
        const user = await User.findOneAndDelete({ name: username });
        if (user) {
            bot.sendMessage(chatId, `‚ùå –Æ–∑–µ—Ä **${username}** –≤–∏–¥–∞–ª–µ–Ω–∏–π!`);
        } else {
            bot.sendMessage(chatId, `‚ö†Ô∏è –Æ–∑–µ—Ä **${username}** –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!`);
        }
        return;
    }
});

// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
bot.on("callback_query", async (query) => {
    bot.answerCallbackQuery(query.id); // –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –æ–¥—Ä–∞–∑—É

    const chatId = query.message.chat.id;
    const userId = query.from.id;

    // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ —ñ –∑–≤–∏—á–∞–π–Ω–∏—Ö)
    if (userId !== bot.id) {
        bot.deleteMessage(chatId, query.message.message_id);
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if (
        (userId !== adminId && query.data.startsWith("increment_")) ||
        query.data.startsWith("decrement_")
    ) {
        return bot.sendMessage(
            chatId,
            "‚ùå –¶—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ –≤–∏–∫–æ–Ω–∞—Ç–∏ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!"
        );
    }

    if (query.data === "add_user") {
        bot.sendMessage(chatId, "–í–≤–µ–¥–∏ —ñ–º'—è —é–∑–µ—Ä–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è:");
        waitingForUserName.set(userId, "add"); // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
    }

    if (query.data === "remove_user") {
        bot.sendMessage(chatId, "–í–≤–µ–¥–∏ —ñ–º'—è —é–∑–µ—Ä–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:");
        waitingForUserName.set(userId, "remove"); // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
    }

    if (query.data === "money") {
        // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä—ñ–≤
        const users = await User.find({});
        if (users.length === 0) {
            return bot.sendMessage(chatId, "‚ùå –£ –±–∞–∑—ñ –Ω–µ–º–∞ —é–∑–µ—Ä—ñ–≤!");
        }

        // –§–æ—Ä–º—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –∑ —é–∑–µ—Ä–∞–º–∏
        const buttons = users.map((user) => [
            { text: user.name, callback_data: `money_${user._id}` },
        ]);

        const options = {
            reply_markup: {
                inline_keyboard: buttons,
            },
        };

        bot.sendMessage(chatId, "–û–±–µ—Ä—ñ—Ç—å —é–∑–µ—Ä–∞:", options);
    }

    // –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —é–∑–µ—Ä–∞
    if (query.data.startsWith("money_")) {
        const userIdFromDb = query.data.split("_")[1];
        const user = await User.findById(userIdFromDb);

        if (!user) {
            return bot.sendMessage(chatId, "‚ùå –Æ–∑–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!");
        }

        // –ö–Ω–æ–ø–∫–∏ ‚ûï —Ç–∞ ‚ûñ –¥–ª—è –∑–º—ñ–Ω–∏ –±–∞–ª–∞–Ω—Å—É
        const options = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: "‚ûï", callback_data: `increment_${user._id}` },
                        { text: "‚ûñ", callback_data: `decrement_${user._id}` },
                    ],
                ],
            },
        };

        bot.sendMessage(
            chatId,
            `üí∞ –ë—É—Ö–∞–ª—Ç–µ—Ä—ñ—è –¥–ª—è **${user.name}**\n\nüî¢ –ù–µ–æ–ø–ª–∞—á–µ–Ω–∏—Ö –º–∞—Ç—é–∫—ñ–≤: ${user.counter}`,
            options
        );
    }

    // –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ ‚ûï (–¥–æ–¥–∞–≤–∞–Ω–Ω—è 1)
    if (query.data.startsWith("increment_")) {
        const userIdFromDb = query.data.split("_")[1];
        const user = await User.findByIdAndUpdate(
            userIdFromDb,
            { $inc: { counter: 1 } },
            { new: true }
        );

        if (!user) {
            return bot.sendMessage(chatId, "‚ùå –Æ–∑–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!");
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
        const options = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: "‚ûï", callback_data: `increment_${user._id}` },
                        { text: "‚ûñ", callback_data: `decrement_${user._id}` },
                    ],
                ],
            },
        };

        bot.editMessageText(
            `üí∞ –ë—É—Ö–∞–ª—Ç–µ—Ä—ñ—è –¥–ª—è **${user.name}**\n\nüî¢ –ù–µ–æ–ø–ª–∞—á–µ–Ω–∏—Ö –º–∞—Ç—é–∫—ñ–≤: ${user.counter}`,
            {
                chat_id: chatId,
                message_id: query.message.message_id,
                ...options,
            }
        );
    }

    // –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ ‚ûñ (–≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è 1)
    if (query.data.startsWith("decrement_")) {
        const userIdFromDb = query.data.split("_")[1];
        const user = await User.findByIdAndUpdate(
            userIdFromDb,
            { $inc: { counter: -1 } },
            { new: true }
        );

        if (!user) {
            return bot.sendMessage(chatId, "‚ùå –Æ–∑–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!");
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
        const options = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: "‚ûï", callback_data: `increment_${user._id}` },
                        { text: "‚ûñ", callback_data: `decrement_${user._id}` },
                    ],
                ],
            },
        };

        bot.editMessageText(
            `üí∞ –ë—É—Ö–∞–ª—Ç–µ—Ä—ñ—è –¥–ª—è **${user.name}**\n\nüî¢ –ù–µ—Å–ø–ª–∞—á–µ–Ω–∏—Ö –º–∞—Ç—é–∫—ñ–≤: ${user.counter}`,
            {
                chat_id: chatId,
                message_id: query.message.message_id,
                ...options,
            }
        );
    }
});
